//the class helpers for box shadow

@mixin set-shadow($size, $prefix, $opacity, $color: $black) {
    @if $prefix == '' {
        .#{$class-shadow} {
            box-shadow: 0 0 ($size * 3) (-($size / 2)) rgba($color, $opacity);
        }  
    }@else {   
        .#{$class-shadow}-#{$prefix} {
            box-shadow: 0 0 ($size * 3) (-($size / 2)) rgba($color, $opacity);
        }
    } 
    .#{$class-shadow}-#{$prefix}-l {
        box-shadow: (-$size) 0 ($size * 3) (-($size / 2)) rgba($color, $opacity);
    }
    .#{$class-shadow}-#{$prefix}-r {
        box-shadow: $size 0 ($size * 3) (-($size / 2)) rgba($color, $opacity);
    }
    .#{$class-shadow}-#{$prefix}-t {
        box-shadow: 0 (-$size) ($size * 3) (-($size / 2)) rgba($color, $opacity);
    }
    .#{$class-shadow}-#{$prefix}-b {
        box-shadow: 0 $size ($size * 3) (-($size / 2)) rgba($color, $opacity);
    }
}


//check the variables in _variables.scss
@mixin since ($point) {
    @if $point==$bp-mobile {
        @media screen and (min-width: map-get($breakpoint, mobile)) {
            @content
        }
    }
    @else if $point==$bp-touch {
        @media screen and (min-width: map-get($breakpoint, touch)) {
            @content
        }
    }
    @else if $point==$bp-tablet {
        @media screen and (min-width: map-get($breakpoint, tablet)) {
            @content
        }
    }
    @else if $point==$bp-desktop {
        @media screen and (min-width: map-get($breakpoint, desktop)) {
            @content
        }
    }
    @else if $point==$bp-widescreen {
        @media screen and (min-width: map-get($breakpoint, widescreen)) {
            @content
        }
    }
    @else {
        @media screen and (min-width: $point) {
            @content
        }
    }
}

@mixin only ($point, $point2: map-get($breakpoint, widescreen)) {
    @if $point=='only-#{$bp-touch}' {
        @media screen and (min-width: map-get($breakpoint, mobile)) and (max-width: map-get($only-breakpoint, only-touch)) {
            @content
        }
    }
    @else if $point=='only-#{$bp-tablet}' {
        @media screen and (min-width: map-get($breakpoint, touch)) and (max-width: map-get($only-breakpoint, only-tablet)) {
            @content
        }
    }
    @else if $point=='only-#{$bp-desktop}' {
        @media screen and (min-width: map-get($breakpoint, tablet)) and (max-width: map-get($only-breakpoint, only-desktop)) {
            @content
        }
    }
    @else {
        @media screen and (min-width: $point) and (max-width: $point2) {
            @content
        }
    }
}

@mixin until ($point) {
    @if $point==$bp-touch {
        @media screen and (max-width: map-get($breakpoint, touch)) {
            @content
        }
    }
    @else if $point==$bp-tablet {
        @media screen and (max-width: map-get($breakpoint, tablet)) {
            @content
        }
    }
    @else if $point==$bp-desktop {
        @media screen and (max-width: map-get($breakpoint, desktop)) {
            @content
        }
    }
    @else if $point==$bp-widescreen {
        @media screen and (max-width: map-get($breakpoint, widescreen)) {
            @content
        }
    }
    @else {
        @media screen and (max-width: $point) {
            @content
        }
    }
}

@mixin color-picker ($class, $base-color, $number-colors: 5, $interval-color: 2) {
    .#{$class-color-picker}-#{$class} {
        background-color: $base-color;
    }
    @for $i from 1 through $number-colors {
        @if ($class=='black') or ($class=='dark') {
            .#{$class-color-picker}-#{$class}-#{$class-lighten-prefix}-#{$i} {
                background-color: lighten($base-color, ($i*$interval-color));
            }
        }
        @else if ($class=='light') or ($class=='cloud') {
            .#{$class-color-picker}-#{$class}-#{$class-darken-prefix}-#{$i} {
                background-color: darken($base-color, ($i*$interval-color));
            }
        }
        @else {
            .#{$class-color-picker}-#{$class}-#{$class-lighten-prefix}-#{$i} {
                background-color: lighten($base-color, ($i*$interval-color));
            }
            .#{$class-color-picker}-#{$class}-#{$class-darken-prefix}-#{$i} {
                background-color: darken($base-color, ($i*$interval-color));
            }
        }
    }
}

@mixin border-shadow ($color, $opacity) {
    box-shadow: inset 0 0 0 1px rgba($color, $opacity);
}

// mixin flexbox

@mixin flex($type: 'flex', $vertical: 'stretch', $horizontal: 'stretch',) {
    display: $type;
    align-items: $vertical;
    align-content: $vertical;
    justify-content: $horizontal;
}